# .github/workflows/release.yml

name: Build and Release

on:
  push:
    branches:
      - 'develop'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build:
    # This job remains the same
    name: Build Executables
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "${{ matrix.python-version }}" }
      - name: Create Version File
        id: set_version
        run: |
          BUILD_DATE=$(date +%Y%m%d)
          NEXT_VER=$(python -c "from constants import NEXT_RELEASE_VERSION; print(NEXT_RELEASE_VERSION)")
          REL_TYPE=$(python -c "from constants import RELEASE_TYPE; print(RELEASE_TYPE)")
          PEP440_REL_TYPE='a'
          if [ "$REL_TYPE" == "beta" ]; then
            PEP440_REL_TYPE='b'
          elif [ "$REL_TYPE" == "rc" ]; then
            PEP440_REL_TYPE='rc'
          fi
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${{ github.ref_name }}
          else
            VERSION="${NEXT_VER}${PEP440_REL_TYPE}${BUILD_DATE}"
          fi
          echo "__version__ = '${VERSION#v}'" > version.py
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Install dependencies
        run: pip install -r requirements.txt && pip install pyinstaller
      - name: Build the application
        run: >
          pyinstaller --noconfirm --onefile --windowed 
          --name "btx-sync" 
          --icon="${{ runner.os == 'Windows' && 'assets/icon.ico' || 'assets/icon.icns' }}" 
          --add-data "assets${{ env.pathsep }}assets" 
          --add-data "README.md${{ env.pathsep }}." 
          --add-data "repository/metadata/root.json${{ env.pathsep }}repository/metadata" 
          app.py
        env: { pathsep: "${{ runner.os == 'Windows' && ';' || ':' }}" }
      - name: Package macOS App
        if: runner.os == 'macOS'
        run: (cd dist && zip -r btx-sync-macOS.zip btx-sync.app)
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: btx-sync-${{ matrix.os }}
          path: |
            ${{ runner.os == 'macOS' && 'dist/btx-sync-macOS.zip' || '' }}
            ${{ runner.os == 'Windows' && 'dist/btx-sync.exe' || '' }}
            ${{ runner.os == 'Linux' && 'dist/btx-sync' || '' }}

  release:
    name: Process, Release and Deploy
    needs: build
    runs-on: ubuntu-latest
    env:
      APP_FULL_VERSION_ENV: ${{ needs.build.outputs.version }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { path: artifacts }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "3.10" }

      - name: Initialize, Sign, and Process Packages
        env:
          TUF_ROOT_KEY: ${{ secrets.TUF_ROOT_PRIVATE_KEY }}
          TUF_SNAPSHOT_KEY: ${{ secrets.TUF_SNAPSHOT_PRIVATE_KEY }}
          TUF_TARGETS_KEY: ${{ secrets.TUF_TARGETS_PRIVATE_KEY }}
          TUF_TIMESTAMP_KEY: ${{ secrets.TUF_TIMESTAMP_PRIVATE_KEY }}
        run: |
          pip install tufup
          # This directory will hold the final, combined repository for deployment
          mkdir -p deploy_repo
          
          # --- Create a backup of the shared keys ---
          mkdir -p keystore_backup
          python -c "import os; f=open('keystore_backup/root', 'w'); f.write(os.environ['TUF_ROOT_KEY']); f.close()"
          python -c "import os; f=open('keystore_backup/snapshot', 'w'); f.write(os.environ['TUF_SNAPSHOT_KEY']); f.close()"
          python -c "import os; f=open('keystore_backup/targets', 'w'); f.write(os.environ['TUF_TARGETS_KEY']); f.close()"
          python -c "import os; f=open('keystore_backup/timestamp', 'w'); f.write(os.environ['TUF_TIMESTAMP_KEY']); f.close()"

          APP_FULL_VERSION="${{ env.APP_FULL_VERSION_ENV }}"
          PLATFORMS="win mac linux"

          for PLATFORM in $PLATFORMS
          do
            echo "--- Processing platform: $PLATFORM ---"
            APP_NAME="btx-sync-$PLATFORM"
            
            # Create a clean workspace for each platform
            rm -rf .tufup-repo-config repository keystore
            mkdir -p repository keystore
            cp keystore_backup/* keystore/

            # Initialize a unique tufup repository for this platform
            tufup init --app-name "$APP_NAME"
            
            # Add the correct artifact for the current platform
            if [ "$PLATFORM" == "win" ]; then
              tufup targets add "$APP_FULL_VERSION" "artifacts/btx-sync-windows-latest/btx-sync.exe" "keystore"
            elif [ "$PLATFORM" == "mac" ]; then
              tufup targets add "$APP_FULL_VERSION" "artifacts/btx-sync-macos-latest/btx-sync-macOS.zip" "keystore"
            elif [ "$PLATFORM" == "linux" ]; then
              tufup targets add "$APP_FULL_VERSION" "artifacts/btx-sync-ubuntu-latest/btx-sync" "keystore"
            fi

            # Sign all roles for this platform's repository
            tufup sign --all

            # Copy the results to the final deployment directory
            # The -a flag preserves attributes and handles recursion
            cp -a repository/. deploy_repo/
          done
      
      - name: Verify Repository Contents
        run: ls -R deploy_repo

      - name: Deploy Update Files to GitHub Pages
        if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Deploy from the combined repository directory
          publish_dir: ./deploy_repo
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'