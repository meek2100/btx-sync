# .github/workflows/release.yml

name: Build, Sign, and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
    outputs:
      app_version: ${{ steps.set_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Create Version File
        id: set_version
        run: |
          VERSION=${{ github.ref_name }}
          echo "__version__ = '${VERSION#v}'" > version.py
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Install dependencies
        run: pip install -r requirements.txt && pip install pyinstaller
      - name: Build the application
        run: >
          pyinstaller --noconfirm --onefile --windowed
          --name "btx-sync"
          --icon="${{ runner.os == 'Windows' && 'assets/icon.ico' || 'assets/icon.icns' }}"
          --add-data "assets${{ env.pathsep }}assets"
          --add-data "README.md${{ env.pathsep }}."
          --add-data "repository/metadata/root.json${{ env.pathsep }}repository/metadata"
          app.py
        env:
          pathsep: "${{ runner.os == 'Windows' && ';' || ':' }}"
      - name: Package macOS App
        if: runner.os == 'macOS'
        run: (cd dist && zip -r btx-sync-macOS.zip btx-sync.app)
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: btx-sync-${{ runner.os }}
          path: |
            ${{ runner.os == 'macOS' && 'dist/btx-sync-macOS.zip' || '' }}
            ${{ runner.os == 'Windows' && 'dist/btx-sync.exe' || '' }}
            ${{ runner.os == 'Linux' && 'dist/btx-sync' || '' }}

  release:
    name: Sign, Release, and Deploy
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install tufup
        run: python -m pip install tufup==0.9.0

      - name: Create Keystore from Secrets
        env:
          TUF_ROOT_KEY: ${{ secrets.TUF_ROOT_PRIVATE_KEY }}
          TUF_SNAPSHOT_KEY: ${{ secrets.TUF_SNAPSHOT_PRIVATE_KEY }}
          TUF_TARGETS_KEY: ${{ secrets.TUF_TARGETS_PRIVATE_KEY }}
          TUF_TIMESTAMP_KEY: ${{ secrets.TUF_TIMESTAMP_PRIVATE_KEY }}
        run: |
          mkdir -p keystore
          echo "$TUF_ROOT_KEY" > keystore/root
          echo "$TUF_SNAPSHOT_KEY" > keystore/snapshot
          echo "$TUF_TARGETS_KEY" > keystore/targets
          echo "$TUF_TIMESTAMP_KEY" > keystore/timestamp

      - name: Process and Sign Platforms
        run: |
          set -e
          APP_VERSION="${{ needs.build.outputs.app_version }}"
          PLATFORMS="win:windows-latest:btx-sync.exe mac:macos-latest:btx-sync-macOS.zip linux:ubuntu-latest:btx-sync"

          for platform_info in $PLATFORMS; do
            IFS=':' read -r p_suffix p_os p_artifact <<< "$platform_info"
            echo "--- Processing platform: $p_suffix ---"
            
            # Define absolute paths for directories and files
            REPO_DIR_ABS="$(pwd)/deploy_repo/$p_suffix"
            ARTIFACT_PATH_ABS="$(pwd)/artifacts/btx-sync-$p_os/$p_artifact"
            KEYSTORE_PATH_ABS="$(pwd)/keystore"
            ROOT_JSON_ABS="$(pwd)/repository/metadata/root.json"

            # Create the repository structure
            mkdir -p "$REPO_DIR_ABS/metadata"
            cp "$ROOT_JSON_ABS" "$REPO_DIR_ABS/metadata/"

            # Create the config file inside the new repository directory
            CONFIG_FILE="$REPO_DIR_ABS/.tufup-repo-config"
            echo "[tufup]" > $CONFIG_FILE
            echo "app_name = btx-sync-$p_suffix" >> $CONFIG_FILE

            # Change into the repository directory before running tufup
            cd "$REPO_DIR_ABS"
            
            # Run tufup commands, using absolute paths to the artifact and keystore
            tufup targets add "$APP_VERSION" "$ARTIFACT_PATH_ABS" "$KEYSTORE_PATH_ABS"

            for role in root targets snapshot timestamp; do
              tufup sign "$role" "$KEYSTORE_PATH_ABS"
            done
            
            # Return to the original directory
            cd -
          done
      
      - name: Verify Repository Contents
        run: ls -R deploy_repo

      - name: Deploy Update Files to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy_repo
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release create ${{ github.ref_name }}
          --title "Release ${{ github.ref_name }}"
          --notes "Download the application for your OS below."
          --prerelease=${{ contains(github.ref, 'a') || contains(github.ref, 'b') || contains(github.ref, 'rc') }}
          
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          gh release upload ${{ github.ref_name }}
          ./artifacts/btx-sync-windows-latest/btx-sync.exe#btx-sync-Windows.exe
          ./artifacts/btx-sync-macos-latest/btx-sync-macOS.zip#btx-sync-macOS.zip
          ./artifacts/btx-sync-ubuntu-latest/btx-sync#btx-sync-Linux