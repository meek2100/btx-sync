# .github/workflows/release.yml

name: Build and Release

on:
  push:
    branches:
      - 'develop'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    # Define outputs for the build job here
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "${{ matrix.python-version }}" }
      - name: Create Version File
        id: set_version
        run: |
          # Define BUILD_DATE and SHORT_SHA once at the beginning
          BUILD_DATE=$(date +%Y%m%d)
          SHORT_SHA=${GITHUB_SHA::7}

          # Read NEXT_RELEASE_VERSION and RELEASE_TYPE from constants.py
          NEXT_VER=$(python -c "from constants import NEXT_RELEASE_VERSION; print(NEXT_RELEASE_VERSION)")
          REL_TYPE=$(python -c "from constants import RELEASE_TYPE; print(RELEASE_TYPE)") 
          
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${{ github.ref_name }}
          elif [[ "${{ github.ref }}" == refs/heads/develop ]]; then
            # Use PEP440 compatible pre-release version: major.minor.patch.pre_tag.YYYYMMDD.gSHORT_SHA
            VERSION="${NEXT_VER}.${REL_TYPE}.${BUILD_DATE}.g${SHORT_SHA}" 
          else
            # Fallback for other branches (e.g., feature branches)
            VERSION="0.0.0.dev.${BUILD_DATE}.g${SHORT_SHA}" # Use .dev for local/feature branch builds
          fi
          echo "__version__ = '${VERSION#v}'" > version.py
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT # Set version as an output for subsequent steps
        shell: bash
      - name: Install dependencies
        run: pip install -r requirements.txt && pip install pyinstaller
      - name: Build the application
        run: >
          pyinstaller --noconfirm --onefile --windowed 
          --name "btx-sync" 
          --icon="${{ runner.os == 'Windows' && 'assets/icon.ico' || 'assets/icon.icns' }}" 
          --add-data "assets${{ env.pathsep }}assets" 
          --add-data "README.md${{ env.pathsep }}." 
          app.py
        env: { pathsep: "${{ runner.os == 'Windows' && ';' || ':' }}" }
      - name: Package macOS App
        if: runner.os == 'macOS'
        run: zip -r dist/btx-sync-macOS.zip dist/btx-sync.app
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: btx-sync-${{ matrix.os }}
          path: dist/

  release:
    name: Process, Release and Deploy
    needs: build
    runs-on: ubuntu-latest
    # Add environment variables here, populated from the 'build' job's outputs
    env:
      APP_FULL_VERSION_ENV: ${{ needs.build.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { path: artifacts }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "3.10" }

      - name: Initialize, Sign, and Process Packages with tufup
        run: |
          pip install tufup
          mkdir -p keystore
          
          # Reconstruct individual private key files from GitHub Secrets
          echo "${{ secrets.TUF_ROOT_PRIVATE_KEY }}" > keystore/root
          echo "${{ secrets.TUF_SNAPSHOT_PRIVATE_KEY }}" > keystore/snapshot
          echo "${{ secrets.TUF_TARGETS_PRIVATE_KEY }}" > keystore/targets
          echo "${{ secrets.TUF_TIMESTAMP_PRIVATE_KEY }}" > keystore/timestamp

          # Ensure the 'repository' directory exists (metadata is assumed to be pre-committed)
          # Removed: tufup init --non-interactive (as it's interactive in tufup 0.9.0)
          # We rely on .tufup-repo-config and metadata files being committed locally once.
          mkdir -p repository/metadata

          # Get the version string from the job's env block
          APP_FULL_VERSION="${{ env.APP_FULL_VERSION_ENV }}"
          echo "Processing application version: $APP_FULL_VERSION"

          # Now, operate from the 'repository' directory where metadata is
          pushd repository
          
          # Add targets (executables) to the TUF repository.
          # Format: tufup targets add <app_version> <bundle_dir> <key_dirs>
          # Note: bundle_dir paths are relative to the *main workspace*,
          #       so we need to use a relative path back to 'artifacts'
          # This includes 'yes |' for any unexpected interactive prompts.
          yes | tufup targets add "$APP_FULL_VERSION" \
            "../artifacts/btx-sync-windows-latest/btx-sync.exe" \
            "../keystore"
          
          yes | tufup targets add "$APP_FULL_VERSION" \
            "../artifacts/btx-sync-macos-latest/btx-sync-macOS.zip" \
            "../keystore"

          yes | tufup targets add "$APP_FULL_VERSION" \
            "../artifacts/btx-sync-ubuntu-latest/btx-sync" \
            "../keystore"
          
          # Sign the updated repository metadata roles separately
          # Format: tufup sign <role_name> <key_dirs> (positional, as --keystore-dir is not recognized)
          # This includes 'yes |' for any unexpected interactive prompts.
          echo "Signing targets role..."
          yes | tufup sign targets ../keystore

          echo "Signing snapshot role..."
          yes | tufup sign snapshot ../keystore

          echo "Signing timestamp role..."
          yes | tufup sign timestamp ../keystore

          popd # Change back to original directory
        env:
          TUF_ROOT_PRIVATE_KEY: ${{ secrets.TUF_ROOT_PRIVATE_KEY }}
          TUF_SNAPSHOT_PRIVATE_KEY: ${{ secrets.TUF_SNAPSHOT_PRIVATE_KEY }}
          TUF_TARGETS_PRIVATE_KEY: ${{ secrets.TUF_TARGETS_PRIVATE_KEY }}
          TUF_TIMESTAMP_PRIVATE_KEY: ${{ secrets.TUF_TIMESTAMP_PRIVATE_KEY }}
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: 'Download the application for your OS below.'
          
      - name: Upload Windows Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/btx-sync-windows-latest/btx-sync.exe
          asset_name: btx-sync-Windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
          
      - name: Upload macOS Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/btx-sync-macos-latest/btx-sync-macOS.zip
          asset_name: btx-sync-macOS.zip
          asset_content_type: application/zip
          
      - name: Upload Linux Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/btx-sync-ubuntu-latest/btx-sync
          asset_name: btx-sync-Linux
          asset_content_type: application/octet-stream
          
      - name: Deploy Update Files to GitHub Pages
        if: startsWith(github.ref, 'refs/tags/v')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repository
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'