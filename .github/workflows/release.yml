# .github/workflows/release.yml

name: Build and Release

on:
  push:
    branches:
      - 'develop'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "${{ matrix.python-version }}" }
      - name: Create Version File
        id: set_version
        run: |
          BUILD_DATE=$(date +%Y%m%d)
          SHORT_SHA=${GITHUB_SHA::7}
          NEXT_VER=$(python -c "from constants import NEXT_RELEASE_VERSION; print(NEXT_RELEASE_VERSION)")
          REL_TYPE=$(python -c "from constants import RELEASE_TYPE; print(RELEASE_TYPE)") 
          
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${{ github.ref_name }}
          elif [[ "${{ github.ref }}" == refs/heads/develop ]]; then
            VERSION="${NEXT_VER}.${REL_TYPE}.${BUILD_DATE}.g${SHORT_SHA}" 
          else
            VERSION="0.0.0.dev.${BUILD_DATE}.g${SHORT_SHA}"
          fi
          echo "__version__ = '${VERSION#v}'" > version.py
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Install dependencies
        run: pip install -r requirements.txt && pip install pyinstaller
      - name: Build the application
        run: >
          pyinstaller --noconfirm --onefile --windowed 
          --name "btx-sync" 
          --icon="${{ runner.os == 'Windows' && 'assets/icon.ico' || 'assets/icon.icns' }}" 
          --add-data "assets${{ env.pathsep }}assets" 
          --add-data "README.md${{ env.pathsep }}." 
          --add-data "repository/metadata/root.json${{ env.pathsep }}repository/metadata" 
          app.py
        env: { pathsep: "${{ runner.os == 'Windows' && ';' || ':' }}" }
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: btx-sync-${{ matrix.os }}
          path: |
            ${{ runner.os == 'macOS' && 'dist/btx-sync.app' || '' }}
            ${{ runner.os == 'Windows' && 'dist/btx-sync.exe' || '' }}
            ${{ runner.os == 'Linux' && 'dist/btx-sync' || '' }}

  release:
    name: Process, Release and Deploy
    needs: build
    runs-on: ubuntu-latest
    env:
      APP_FULL_VERSION_ENV: ${{ needs.build.outputs.version }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { path: artifacts }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: "3.10" }

      - name: Create Bundle Directory
        run: |
          mkdir -p bundle
          cp artifacts/btx-sync-windows-latest/btx-sync.exe bundle/
          # On macOS, we now have a zip inside an artifact directory, so we must unzip it first
          unzip artifacts/btx-sync-macos-latest/btx-sync.app -d bundle/
          cp artifacts/btx-sync-ubuntu-latest/btx-sync bundle/

      - name: Initialize, Sign, and Process Packages with tufup
        env:
          TUF_ROOT_KEY: ${{ secrets.TUF_ROOT_PRIVATE_KEY }}
          TUF_SNAPSHOT_KEY: ${{ secrets.TUF_SNAPSHOT_PRIVATE_KEY }}
          TUF_TARGETS_KEY: ${{ secrets.TUF_TARGETS_PRIVATE_KEY }}
          TUF_TIMESTAMP_KEY: ${{ secrets.TUF_TIMESTAMP_PRIVATE_KEY }}
        run: |
          pip install tufup
          mkdir -p keystore repository/targets

          python -c "import os; f=open('keystore/root', 'w'); f.write(os.environ['TUF_ROOT_KEY']); f.close()"
          python -c "import os; f=open('keystore/snapshot', 'w'); f.write(os.environ['TUF_SNAPSHOT_KEY']); f.close()"
          python -c "import os; f=open('keystore/targets', 'w'); f.write(os.environ['TUF_TARGETS_KEY']); f.close()"
          python -c "import os; f=open('keystore/timestamp', 'w'); f.write(os.environ['TUF_TIMESTAMP_KEY']); f.close()"

          APP_FULL_VERSION="${{ env.APP_FULL_VERSION_ENV }}"
          echo "Processing application version: $APP_FULL_VERSION"

          tufup targets add "$APP_FULL_VERSION" "bundle" "keystore"
          
          echo "Signing targets role..."
          tufup sign targets keystore

          echo "Signing snapshot role..."
          tufup sign snapshot keystore

          echo "Signing timestamp role..."
          tufup sign timestamp keystore
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: 'Download the application for your OS below.'
          
      - name: Upload Windows Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/btx-sync-windows-latest/btx-sync.exe
          asset_name: btx-sync-Windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
          
      - name: Upload macOS Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/btx-sync-macos-latest/btx-sync-macOS.zip
          asset_name: btx-sync-macOS.zip
          asset_content_type: application/zip
          
      - name: Upload Linux Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/btx-sync-ubuntu-latest/btx-sync
          asset_name: btx-sync-Linux
          asset_content_type: application/octet-stream
          
      - name: Deploy Update Files to GitHub Pages
        if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repository
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          